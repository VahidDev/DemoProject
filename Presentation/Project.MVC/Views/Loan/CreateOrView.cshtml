  <!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Loan Details</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
@model LoanDetailsViewModel

<!-- /.content-header -->
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <!-- Main row -->
        <div class="row justify-content-center">
            <div class="col-md-7">
            <!-- general form elements -->
            <div class="card card-primary">
              <div class="card-header">
                <h3 class="card-title">Loan Details</h3>
              </div>
              <!-- /.card-header -->
              <!-- form start -->
              <form>
                <div class="card-body">
                  <div class="form-group">
                      <label>Client</label>
                      @if (Model.Id.HasValue)
                      {
                          <select class="form-control" disabled>
                            <option>@Model.LoanDetails.Client</option>
                          </select>
                      }else
                      {
                          <select class="form-control" id="clients">
                              <option value="-1">Select a client</option>
                              @foreach(var client in Model.ClientsComboBox)
                              {
                                  <option value="@client.Key">@client.Value</option>
                              }
                              </select>
                      }
                  </div>
                  <div class="form-group">
                      <label asp-for="LoanDetails.ClientPhone">Telephone number</label>
                      <input class="form-control" value="@Model.LoanDetails.ClientPhone" asp-for="LoanDetails.ClientPhone" disabled>
                  </div>
                   <div class="form-group">
                       <label asp-for="LoanDetails.LoanAmount">Loan Amount</label>
                       <input class="form-control" value="@Model.LoanDetails.LoanAmount" asp-for="LoanDetails.LoanAmount">
                  </div>
                   <div class="form-group">
                       <label asp-for="LoanDetails.LoanAmount">Loan period (months)</label>
                       @if (Model.Id.HasValue)
                       {
                           <select class="form-control" asp-for="LoanDetails.LoanPeriod" disabled>
                               <option>@Model.LoanDetails.LoanPeriod</option>
                           </select>
                       }
                       else
                       {
                           <select class="form-control" asp-for="LoanDetails.LoanPeriod">
                               <option value="-1">Choose Period</option>
                               @foreach(var loanMonth in Model.LoanMonthsCombo)
                               {
                                   <option value="@loanMonth">@loanMonth</option>
                               }
                               </select>
                       }    
                  </div>
                  <div class="form-group">
                      <label asp-for="LoanDetails.InterestRate">Monthly Interest Rate %</label>
                      <input class="form-control" value="@Model.LoanDetails.InterestRate" asp-for="LoanDetails.InterestRate">
                  </div>
                   <div class="form-group">
                       <label asp-for="LoanDetails.PayoutDate">Payout Date</label>
                       <input type="date" class="form-control" asp-for="LoanDetails.PayoutDate">
                  </div>
                  <a class="btn btn-success float-right" id="calculateInvoicesBtn">Calculate Invoices</a>
                </div>
                <!-- /.card-body -->
                
                <section id="invocesSection">
                @if (Model.Id.HasValue)
                {
                      <div class="col-md-6 px-4">
                      <label>Invoices:</label>
                       <div class="row">
                           <div class="col-12">
                               <div class="card-body">
                                   <table id="example2" class="table table-bordered table-hover">
                                       <thead>
                                          <tr>
                                              <th>#</th>
                                              <th>Invoice No</th>
                                              <th>Due Date</th>
                                              <th>Amount</th>
                                          </tr>
                                       </thead>
                                      <tbody>
                                        @foreach(var invoice in Model.Invoices)
                                        {
                                            <tr>
                                                <td>@invoice.Order</td>
                                                <td>@invoice.InvoiceNr</td>
                                                <td>@invoice.InvoiceDate</td>
                                                <td>@invoice.Amount</td>
                                            </tr>
                                        }
                                      </tbody>
                                   </table>
                               </div>
                           </div>
                       </div>
                       <div class="form-group d-flex justify-content-between align-items-center">
                           <label>Total Interest </label>
                           <input id="loanInterest" value="@Model.TotalInterest" disabled>
                       </div>
                  </div>
                  }
                  </section>
                        <div class="card-footer d-flex justify-content-end">
                            <a class="btn btn-primary mx-3 disabled" id="issueLoanBtn">Issue loan</a>
                            <a asp-action="Index" class="btn btn-danger" id="cancelBtn" >Cancel</a>
                        </div>
                  </form>
                  </div>
          </div>
        </div>
        <!-- /.row (main row) -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->

<script>

    var invoicesContainer = null;

    $(document).ready(function () 
    {
        

        @if (Model.Id.HasValue)
        {
                @:DisableAllFields();
                @:InitInputs();
        }else
        {
            @:SetEvents();
        }

        document.getElementById("issueLoanBtn").addEventListener("click",function(e){
            IssueLoan();
        })

        document.getElementById("calculateInvoicesBtn").addEventListener("click",function(e){
            CalculateAndGetInvoices();
        })
    });

    function InitInputs(){

        const loanPayOutDateInputId = '@Html.IdFor(m=>m.LoanDetails.PayoutDate)';

        const payputDate = '@Model.LoanDetails.PayoutDate';
        const payputDateFormatted = GetValidJsDateFromFormattedDate(payputDate);
        document.getElementById(loanPayOutDateInputId).value = payputDateFormatted;
    }

    function SetEvents(){

        document.getElementById("clients").addEventListener('change', function (e) {
            SetClientPhone(e.target.value);
        });
    }

     function SetClientPhone(clientId){

        const clientPhoneInputId = '@Html.IdFor(m=>m.LoanDetails.ClientPhone)';

        if(clientId === '-1'){
            document.getElementById(clientPhoneInputId).value = "";
            return;
        }

         $.ajax
         ({
           type: "GET",
           url: "/Client/GetClientPhone?clientId=" + clientId,
           success: function(result)
           {
               if(result.success === false){
                   alert("Something went wrong check the data!");
                    return null;
               }

               document.getElementById(clientPhoneInputId).value = result.data;
           },
           error: function(error)
           {
               alert(error)
           }
         });
    }

    function DisableAllFields() {
        const loanAmountInputId = '@Html.IdFor(m=>m.LoanDetails.LoanAmount)';
        const interestRateInputId = '@Html.IdFor(m=>m.LoanDetails.InterestRate)';
        const payOutInputId = '@Html.IdFor(m=>m.LoanDetails.PayoutDate)';

        $("#" + loanAmountInputId).attr('disabled', 'disabled');
        $("#" + interestRateInputId).attr('disabled', 'disabled');
        $("#" + payOutInputId).attr('disabled', 'disabled');
        $("#issueLoanBtn").hide();
        $("#calculateInvoicesBtn").hide();
    }

      function IssueLoan() {

        const phoneInputId = '@Html.IdFor(m=>m.LoanDetails.ClientPhone)';
        const interestRateInputId = '@Html.IdFor(m=>m.LoanDetails.InterestRate)';
        const loanAmountInputId = '@Html.IdFor(m=>m.LoanDetails.LoanAmount)';
        const loanPeriodInputId = '@Html.IdFor(m=>m.LoanDetails.LoanPeriod)';
        const loanPayOutDateInputId = '@Html.IdFor(m=>m.LoanDetails.PayoutDate)';
        const clientInputId = '@Html.IdFor(m=>m.ClientsComboBox)';

         let model = {
              clientId:  Number($("#clients").val()),
              phone:    $("#" + phoneInputId).val(),
              amount:  $("#" + loanAmountInputId).val(),
              period:  Number($("#" + loanPeriodInputId).val()),
              payOutDate:  $("#" + loanPayOutDateInputId).val(),
              interest:  $("#" + interestRateInputId).val(),
              invoices : invoicesContainer.invoices
         };

        if (!ValidateAmount(model.amount)) {
             alert("Amount date needs to be between 100 and 5000!");
            return;
        }

         $.ajax
         ({
           type: "POST",
           contentType: "application/json; charset=utf-8",
           url: "/Loan/IssueLoan",
           data: JSON.stringify(model),
           success: function(result)
           {
               if(result.success === false){
                   alert("Check the data!");
                    return;
               }

              window.location.href = "Index/";
           },
           error: function(error)
           {
               alert(error)
           } 
         });
    }

     function ValidateAmount(amount){
        return !(amount < 100 || amount > 5000);
    }

    function CalculateAndGetInvoices() {

        const loanAmountInputId = '@Html.IdFor(m=>m.LoanDetails.LoanAmount)';
        const interestRateInputId = '@Html.IdFor(m=>m.LoanDetails.InterestRate)';
        const loanPeriodInputId = '@Html.IdFor(m=>m.LoanDetails.LoanPeriod)';
        const loanPayOutDateInputId = '@Html.IdFor(m=>m.LoanDetails.PayoutDate)';

         let data = {
              loanAmount:  $("#" + loanAmountInputId).val(),
              interestRate:    $("#" + interestRateInputId).val(),
              loanPeriod:  $("#" + loanPeriodInputId).val(),
              loanPayOutDate:  $("#" + loanPayOutDateInputId).val()
         };

         if(!ValidateData(data)){
             alert("Fill all the inputs and make sure that they are valid!")
             return;
         }

        if (!ValidateAmount(data.loanAmount)) {
            alert("Amount date needs to be between 100 and 5000!");
            return;
        }

         $.ajax
         ({
           type: "POST",
           contentType: "application/json; charset=utf-8",
           url: "/Loan/CalculateInvoices",
           data: JSON.stringify(data),
           success: function(result)
           {
               if(result.success === false){
                   alert("Something went wrong check the data!");
                    return null;
               }

               PlaceInvoices(result.data);

               $("#issueLoanBtn").removeClass("disabled");

               invoicesContainer = result.data;
           },
           error: function(error)
           {
               alert(error)
           } 
         });
    }

    function ValidateData(data){
        return !(data.loanAmount === null || data.loanAmount === 0 || 
                data.loanPayOutDate === null || data.loanPayOutDate === '' ||
                data.loanPeriod === -1 || 
                data.interestRate == null || data.interestRate == 0)
    }

    function PlaceInvoices(invoicesModel){

        const invoicesSection = document.getElementById("invocesSection");
        let html = `<div class="col-md-6 px-4">
                      <label>Invoices:</label>
                       <div class="row">
                           <div class="col-12">
                               <div class="card-body">
                                   <table id="example2" class="table table-bordered table-hover">
                                       <thead>
                                          <tr>
                                              <th>#</th>
                                              <th>Invoice No</th>
                                              <th>Due Date</th>
                                              <th>Amount</th>
                                          </tr>
                                       </thead>
                                      <tbody>`;
                                      let order = 1;

        for (let invoice of invoicesModel.invoices) {
            let payDate = new Date(invoice.payDate);
            let formattedDate = GetFormattedDate(payDate);

            html += `<tr>
                                                <td>`+ order +`</td>
                                                <td>`+ invoice.invoiceNr +`</td>
                                                <td>`+ formattedDate +`</td>
                                                <td>`+  invoice.payment +`</td>
                                            </tr>
                                            <input type=hidden id='invoiceNr' value=` +invoice.invoiceNr +`/>
                                             <input type=hidden id='payDate' value=` + formattedDate + `/>
                                            <input type=hidden id='payment' value=` +invoice.payment +`/>
                                            <input type=hidden id='period' value=` +invoice.period +`/>
                                            <input type=hidden id='currentBalance' value=` +invoice.currentBalance +`/>
                                            <input type=hidden id='interest' value=` +invoice.interest +`/>
                                            <input type=hidden id='principal' value=` +invoice.principal +`/>
                                            `
           order++;
        }

        html += `</tbody>
                                   </table>
                               </div>
                           </div>
                       </div>
                       <div class="form-group d-flex justify-content-between align-items-center">
                           <label>Total Interest </label>
                           <input id="loanInterest" value="`+ invoicesModel.totalInterest +`" disabled>
                       </div>
                  </div>`;

        invoicesSection.innerHTML = html;
    }

    function GetValidJsDateFromFormattedDate(dateText) {

    const dateSplitted = dateText.split("/")

    const year = dateSplitted[2];
    const month = dateSplitted[1];
    const day = dateSplitted[0];

  

    const validDateFormatForJs = year + '-' + month + '-' + day;

    return validDateFormatForJs;
}

    function GetFormattedDate(date) {
        var year = date.getFullYear();

        var month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : '0' + month;

        var day = date.getDate().toString();
        day = day.length > 1 ? day : '0' + day;

        return month + '/' + day + '/' + year;
    }


</script>